# coding: utf-8

"""
    Brevo API

    Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity |   # noqa: E501

    OpenAPI spec version: 3.0.0
    Contact: contact@brevo.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class UpdateWhatsAppCampaign(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'campaign_name': 'str',
        'campaign_status': 'str',
        'reschedule_for': 'str',
        'recipients': 'CreateWhatsAppCampaignRecipients'
    }

    attribute_map = {
        'campaign_name': 'campaignName',
        'campaign_status': 'campaignStatus',
        'reschedule_for': 'rescheduleFor',
        'recipients': 'recipients'
    }

    def __init__(self, campaign_name=None, campaign_status='scheduled', reschedule_for=None, recipients=None):  # noqa: E501
        """UpdateWhatsAppCampaign - a model defined in Swagger"""  # noqa: E501

        self._campaign_name = None
        self._campaign_status = None
        self._reschedule_for = None
        self._recipients = None
        self.discriminator = None

        if campaign_name is not None:
            self.campaign_name = campaign_name
        if campaign_status is not None:
            self.campaign_status = campaign_status
        if reschedule_for is not None:
            self.reschedule_for = reschedule_for
        if recipients is not None:
            self.recipients = recipients

    @property
    def campaign_name(self):
        """Gets the campaign_name of this UpdateWhatsAppCampaign.  # noqa: E501

        Name of the campaign  # noqa: E501

        :return: The campaign_name of this UpdateWhatsAppCampaign.  # noqa: E501
        :rtype: str
        """
        return self._campaign_name

    @campaign_name.setter
    def campaign_name(self, campaign_name):
        """Sets the campaign_name of this UpdateWhatsAppCampaign.

        Name of the campaign  # noqa: E501

        :param campaign_name: The campaign_name of this UpdateWhatsAppCampaign.  # noqa: E501
        :type: str
        """

        self._campaign_name = campaign_name

    @property
    def campaign_status(self):
        """Gets the campaign_status of this UpdateWhatsAppCampaign.  # noqa: E501

        Status of the campaign  # noqa: E501

        :return: The campaign_status of this UpdateWhatsAppCampaign.  # noqa: E501
        :rtype: str
        """
        return self._campaign_status

    @campaign_status.setter
    def campaign_status(self, campaign_status):
        """Sets the campaign_status of this UpdateWhatsAppCampaign.

        Status of the campaign  # noqa: E501

        :param campaign_status: The campaign_status of this UpdateWhatsAppCampaign.  # noqa: E501
        :type: str
        """
        allowed_values = ["scheduled", "suspended"]  # noqa: E501
        if campaign_status not in allowed_values:
            raise ValueError(
                "Invalid value for `campaign_status` ({0}), must be one of {1}"  # noqa: E501
                .format(campaign_status, allowed_values)
            )

        self._campaign_status = campaign_status

    @property
    def reschedule_for(self):
        """Gets the reschedule_for of this UpdateWhatsAppCampaign.  # noqa: E501

        Reschedule the sending UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) of campaign. **Prefer to pass your timezone in date-time format for accurate result.For example: **2017-06-01T12:30:00+02:00** Use this field to update the scheduledAt of any existing draft or scheduled WhatsApp campaign.   # noqa: E501

        :return: The reschedule_for of this UpdateWhatsAppCampaign.  # noqa: E501
        :rtype: str
        """
        return self._reschedule_for

    @reschedule_for.setter
    def reschedule_for(self, reschedule_for):
        """Sets the reschedule_for of this UpdateWhatsAppCampaign.

        Reschedule the sending UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) of campaign. **Prefer to pass your timezone in date-time format for accurate result.For example: **2017-06-01T12:30:00+02:00** Use this field to update the scheduledAt of any existing draft or scheduled WhatsApp campaign.   # noqa: E501

        :param reschedule_for: The reschedule_for of this UpdateWhatsAppCampaign.  # noqa: E501
        :type: str
        """

        self._reschedule_for = reschedule_for

    @property
    def recipients(self):
        """Gets the recipients of this UpdateWhatsAppCampaign.  # noqa: E501


        :return: The recipients of this UpdateWhatsAppCampaign.  # noqa: E501
        :rtype: CreateWhatsAppCampaignRecipients
        """
        return self._recipients

    @recipients.setter
    def recipients(self, recipients):
        """Sets the recipients of this UpdateWhatsAppCampaign.


        :param recipients: The recipients of this UpdateWhatsAppCampaign.  # noqa: E501
        :type: CreateWhatsAppCampaignRecipients
        """

        self._recipients = recipients

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateWhatsAppCampaign, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateWhatsAppCampaign):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
