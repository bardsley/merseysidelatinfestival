# coding: utf-8

"""
    Brevo API

    Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity |   # noqa: E501

    OpenAPI spec version: 3.0.0
    Contact: contact@brevo.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ConversionSourceProduct(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'sku': 'str',
        'price': 'float',
        'url': 'str',
        'image_url': 'str',
        'orders_count': 'int',
        'revenue': 'float'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'sku': 'sku',
        'price': 'price',
        'url': 'url',
        'image_url': 'imageUrl',
        'orders_count': 'ordersCount',
        'revenue': 'revenue'
    }

    def __init__(self, id=None, name=None, sku=None, price=None, url=None, image_url=None, orders_count=None, revenue=None):  # noqa: E501
        """ConversionSourceProduct - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self._sku = None
        self._price = None
        self._url = None
        self._image_url = None
        self._orders_count = None
        self._revenue = None
        self.discriminator = None

        self.id = id
        if name is not None:
            self.name = name
        if sku is not None:
            self.sku = sku
        if price is not None:
            self.price = price
        if url is not None:
            self.url = url
        if image_url is not None:
            self.image_url = image_url
        if orders_count is not None:
            self.orders_count = orders_count
        if revenue is not None:
            self.revenue = revenue

    @property
    def id(self):
        """Gets the id of this ConversionSourceProduct.  # noqa: E501


        :return: The id of this ConversionSourceProduct.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ConversionSourceProduct.


        :param id: The id of this ConversionSourceProduct.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this ConversionSourceProduct.  # noqa: E501


        :return: The name of this ConversionSourceProduct.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConversionSourceProduct.


        :param name: The name of this ConversionSourceProduct.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def sku(self):
        """Gets the sku of this ConversionSourceProduct.  # noqa: E501


        :return: The sku of this ConversionSourceProduct.  # noqa: E501
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this ConversionSourceProduct.


        :param sku: The sku of this ConversionSourceProduct.  # noqa: E501
        :type: str
        """

        self._sku = sku

    @property
    def price(self):
        """Gets the price of this ConversionSourceProduct.  # noqa: E501


        :return: The price of this ConversionSourceProduct.  # noqa: E501
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this ConversionSourceProduct.


        :param price: The price of this ConversionSourceProduct.  # noqa: E501
        :type: float
        """

        self._price = price

    @property
    def url(self):
        """Gets the url of this ConversionSourceProduct.  # noqa: E501


        :return: The url of this ConversionSourceProduct.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ConversionSourceProduct.


        :param url: The url of this ConversionSourceProduct.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def image_url(self):
        """Gets the image_url of this ConversionSourceProduct.  # noqa: E501


        :return: The image_url of this ConversionSourceProduct.  # noqa: E501
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """Sets the image_url of this ConversionSourceProduct.


        :param image_url: The image_url of this ConversionSourceProduct.  # noqa: E501
        :type: str
        """

        self._image_url = image_url

    @property
    def orders_count(self):
        """Gets the orders_count of this ConversionSourceProduct.  # noqa: E501


        :return: The orders_count of this ConversionSourceProduct.  # noqa: E501
        :rtype: int
        """
        return self._orders_count

    @orders_count.setter
    def orders_count(self, orders_count):
        """Sets the orders_count of this ConversionSourceProduct.


        :param orders_count: The orders_count of this ConversionSourceProduct.  # noqa: E501
        :type: int
        """

        self._orders_count = orders_count

    @property
    def revenue(self):
        """Gets the revenue of this ConversionSourceProduct.  # noqa: E501


        :return: The revenue of this ConversionSourceProduct.  # noqa: E501
        :rtype: float
        """
        return self._revenue

    @revenue.setter
    def revenue(self, revenue):
        """Sets the revenue of this ConversionSourceProduct.


        :param revenue: The revenue of this ConversionSourceProduct.  # noqa: E501
        :type: float
        """

        self._revenue = revenue

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConversionSourceProduct, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConversionSourceProduct):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
