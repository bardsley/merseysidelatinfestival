# coding: utf-8

"""
    Brevo API

    Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity |   # noqa: E501

    OpenAPI spec version: 3.0.0
    Contact: contact@brevo.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CorporateGroupDetailsResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'group': 'CorporateGroupDetailsResponseGroup',
        'sub_accounts': 'list[CorporateGroupDetailsResponseSubaccounts]',
        'users': 'list[CorporateGroupDetailsResponseUsers]'
    }

    attribute_map = {
        'group': 'group',
        'sub_accounts': 'sub-accounts',
        'users': 'users'
    }

    def __init__(self, group=None, sub_accounts=None, users=None):  # noqa: E501
        """CorporateGroupDetailsResponse - a model defined in Swagger"""  # noqa: E501

        self._group = None
        self._sub_accounts = None
        self._users = None
        self.discriminator = None

        if group is not None:
            self.group = group
        if sub_accounts is not None:
            self.sub_accounts = sub_accounts
        if users is not None:
            self.users = users

    @property
    def group(self):
        """Gets the group of this CorporateGroupDetailsResponse.  # noqa: E501


        :return: The group of this CorporateGroupDetailsResponse.  # noqa: E501
        :rtype: CorporateGroupDetailsResponseGroup
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this CorporateGroupDetailsResponse.


        :param group: The group of this CorporateGroupDetailsResponse.  # noqa: E501
        :type: CorporateGroupDetailsResponseGroup
        """

        self._group = group

    @property
    def sub_accounts(self):
        """Gets the sub_accounts of this CorporateGroupDetailsResponse.  # noqa: E501


        :return: The sub_accounts of this CorporateGroupDetailsResponse.  # noqa: E501
        :rtype: list[CorporateGroupDetailsResponseSubaccounts]
        """
        return self._sub_accounts

    @sub_accounts.setter
    def sub_accounts(self, sub_accounts):
        """Sets the sub_accounts of this CorporateGroupDetailsResponse.


        :param sub_accounts: The sub_accounts of this CorporateGroupDetailsResponse.  # noqa: E501
        :type: list[CorporateGroupDetailsResponseSubaccounts]
        """

        self._sub_accounts = sub_accounts

    @property
    def users(self):
        """Gets the users of this CorporateGroupDetailsResponse.  # noqa: E501


        :return: The users of this CorporateGroupDetailsResponse.  # noqa: E501
        :rtype: list[CorporateGroupDetailsResponseUsers]
        """
        return self._users

    @users.setter
    def users(self, users):
        """Sets the users of this CorporateGroupDetailsResponse.


        :param users: The users of this CorporateGroupDetailsResponse.  # noqa: E501
        :type: list[CorporateGroupDetailsResponseUsers]
        """

        self._users = users

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CorporateGroupDetailsResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CorporateGroupDetailsResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
