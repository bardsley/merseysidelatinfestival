# coding: utf-8

"""
    Brevo API

    Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity |   # noqa: E501

    OpenAPI spec version: 3.0.0
    Contact: contact@brevo.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SubAccountAppsToggleRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'inbox': 'bool',
        'whatsapp': 'bool',
        'automation': 'bool',
        'email_campaigns': 'bool',
        'sms_campaigns': 'bool',
        'landing_pages': 'bool',
        'transactional_emails': 'bool',
        'transactional_sms': 'bool',
        'facebook_ads': 'bool',
        'web_push': 'bool',
        'meetings': 'bool',
        'conversations': 'bool',
        'crm': 'bool'
    }

    attribute_map = {
        'inbox': 'inbox',
        'whatsapp': 'whatsapp',
        'automation': 'automation',
        'email_campaigns': 'email-campaigns',
        'sms_campaigns': 'sms-campaigns',
        'landing_pages': 'landing-pages',
        'transactional_emails': 'transactional-emails',
        'transactional_sms': 'transactional-sms',
        'facebook_ads': 'facebook-ads',
        'web_push': 'web-push',
        'meetings': 'meetings',
        'conversations': 'conversations',
        'crm': 'crm'
    }

    def __init__(self, inbox=None, whatsapp=None, automation=None, email_campaigns=None, sms_campaigns=None, landing_pages=None, transactional_emails=None, transactional_sms=None, facebook_ads=None, web_push=None, meetings=None, conversations=None, crm=None):  # noqa: E501
        """SubAccountAppsToggleRequest - a model defined in Swagger"""  # noqa: E501

        self._inbox = None
        self._whatsapp = None
        self._automation = None
        self._email_campaigns = None
        self._sms_campaigns = None
        self._landing_pages = None
        self._transactional_emails = None
        self._transactional_sms = None
        self._facebook_ads = None
        self._web_push = None
        self._meetings = None
        self._conversations = None
        self._crm = None
        self.discriminator = None

        if inbox is not None:
            self.inbox = inbox
        if whatsapp is not None:
            self.whatsapp = whatsapp
        if automation is not None:
            self.automation = automation
        if email_campaigns is not None:
            self.email_campaigns = email_campaigns
        if sms_campaigns is not None:
            self.sms_campaigns = sms_campaigns
        if landing_pages is not None:
            self.landing_pages = landing_pages
        if transactional_emails is not None:
            self.transactional_emails = transactional_emails
        if transactional_sms is not None:
            self.transactional_sms = transactional_sms
        if facebook_ads is not None:
            self.facebook_ads = facebook_ads
        if web_push is not None:
            self.web_push = web_push
        if meetings is not None:
            self.meetings = meetings
        if conversations is not None:
            self.conversations = conversations
        if crm is not None:
            self.crm = crm

    @property
    def inbox(self):
        """Gets the inbox of this SubAccountAppsToggleRequest.  # noqa: E501

        Set this field to enable or disable Inbox on the sub-account / Not applicable on ENTv2  # noqa: E501

        :return: The inbox of this SubAccountAppsToggleRequest.  # noqa: E501
        :rtype: bool
        """
        return self._inbox

    @inbox.setter
    def inbox(self, inbox):
        """Sets the inbox of this SubAccountAppsToggleRequest.

        Set this field to enable or disable Inbox on the sub-account / Not applicable on ENTv2  # noqa: E501

        :param inbox: The inbox of this SubAccountAppsToggleRequest.  # noqa: E501
        :type: bool
        """

        self._inbox = inbox

    @property
    def whatsapp(self):
        """Gets the whatsapp of this SubAccountAppsToggleRequest.  # noqa: E501

        Set this field to enable or disable Whatsapp campaigns on the sub-account  # noqa: E501

        :return: The whatsapp of this SubAccountAppsToggleRequest.  # noqa: E501
        :rtype: bool
        """
        return self._whatsapp

    @whatsapp.setter
    def whatsapp(self, whatsapp):
        """Sets the whatsapp of this SubAccountAppsToggleRequest.

        Set this field to enable or disable Whatsapp campaigns on the sub-account  # noqa: E501

        :param whatsapp: The whatsapp of this SubAccountAppsToggleRequest.  # noqa: E501
        :type: bool
        """

        self._whatsapp = whatsapp

    @property
    def automation(self):
        """Gets the automation of this SubAccountAppsToggleRequest.  # noqa: E501

        Set this field to enable or disable Automation on the sub-account  # noqa: E501

        :return: The automation of this SubAccountAppsToggleRequest.  # noqa: E501
        :rtype: bool
        """
        return self._automation

    @automation.setter
    def automation(self, automation):
        """Sets the automation of this SubAccountAppsToggleRequest.

        Set this field to enable or disable Automation on the sub-account  # noqa: E501

        :param automation: The automation of this SubAccountAppsToggleRequest.  # noqa: E501
        :type: bool
        """

        self._automation = automation

    @property
    def email_campaigns(self):
        """Gets the email_campaigns of this SubAccountAppsToggleRequest.  # noqa: E501

        Set this field to enable or disable Email Campaigns on the sub-account  # noqa: E501

        :return: The email_campaigns of this SubAccountAppsToggleRequest.  # noqa: E501
        :rtype: bool
        """
        return self._email_campaigns

    @email_campaigns.setter
    def email_campaigns(self, email_campaigns):
        """Sets the email_campaigns of this SubAccountAppsToggleRequest.

        Set this field to enable or disable Email Campaigns on the sub-account  # noqa: E501

        :param email_campaigns: The email_campaigns of this SubAccountAppsToggleRequest.  # noqa: E501
        :type: bool
        """

        self._email_campaigns = email_campaigns

    @property
    def sms_campaigns(self):
        """Gets the sms_campaigns of this SubAccountAppsToggleRequest.  # noqa: E501

        Set this field to enable or disable SMS Marketing on the sub-account  # noqa: E501

        :return: The sms_campaigns of this SubAccountAppsToggleRequest.  # noqa: E501
        :rtype: bool
        """
        return self._sms_campaigns

    @sms_campaigns.setter
    def sms_campaigns(self, sms_campaigns):
        """Sets the sms_campaigns of this SubAccountAppsToggleRequest.

        Set this field to enable or disable SMS Marketing on the sub-account  # noqa: E501

        :param sms_campaigns: The sms_campaigns of this SubAccountAppsToggleRequest.  # noqa: E501
        :type: bool
        """

        self._sms_campaigns = sms_campaigns

    @property
    def landing_pages(self):
        """Gets the landing_pages of this SubAccountAppsToggleRequest.  # noqa: E501

        Set this field to enable or disable Landing pages on the sub-account  # noqa: E501

        :return: The landing_pages of this SubAccountAppsToggleRequest.  # noqa: E501
        :rtype: bool
        """
        return self._landing_pages

    @landing_pages.setter
    def landing_pages(self, landing_pages):
        """Sets the landing_pages of this SubAccountAppsToggleRequest.

        Set this field to enable or disable Landing pages on the sub-account  # noqa: E501

        :param landing_pages: The landing_pages of this SubAccountAppsToggleRequest.  # noqa: E501
        :type: bool
        """

        self._landing_pages = landing_pages

    @property
    def transactional_emails(self):
        """Gets the transactional_emails of this SubAccountAppsToggleRequest.  # noqa: E501

        Set this field to enable or disable Transactional Email on the sub-account  # noqa: E501

        :return: The transactional_emails of this SubAccountAppsToggleRequest.  # noqa: E501
        :rtype: bool
        """
        return self._transactional_emails

    @transactional_emails.setter
    def transactional_emails(self, transactional_emails):
        """Sets the transactional_emails of this SubAccountAppsToggleRequest.

        Set this field to enable or disable Transactional Email on the sub-account  # noqa: E501

        :param transactional_emails: The transactional_emails of this SubAccountAppsToggleRequest.  # noqa: E501
        :type: bool
        """

        self._transactional_emails = transactional_emails

    @property
    def transactional_sms(self):
        """Gets the transactional_sms of this SubAccountAppsToggleRequest.  # noqa: E501

        Set this field to enable or disable Transactional SMS on the sub-account  # noqa: E501

        :return: The transactional_sms of this SubAccountAppsToggleRequest.  # noqa: E501
        :rtype: bool
        """
        return self._transactional_sms

    @transactional_sms.setter
    def transactional_sms(self, transactional_sms):
        """Sets the transactional_sms of this SubAccountAppsToggleRequest.

        Set this field to enable or disable Transactional SMS on the sub-account  # noqa: E501

        :param transactional_sms: The transactional_sms of this SubAccountAppsToggleRequest.  # noqa: E501
        :type: bool
        """

        self._transactional_sms = transactional_sms

    @property
    def facebook_ads(self):
        """Gets the facebook_ads of this SubAccountAppsToggleRequest.  # noqa: E501

        Set this field to enable or disable Facebook ads on the sub-account  # noqa: E501

        :return: The facebook_ads of this SubAccountAppsToggleRequest.  # noqa: E501
        :rtype: bool
        """
        return self._facebook_ads

    @facebook_ads.setter
    def facebook_ads(self, facebook_ads):
        """Sets the facebook_ads of this SubAccountAppsToggleRequest.

        Set this field to enable or disable Facebook ads on the sub-account  # noqa: E501

        :param facebook_ads: The facebook_ads of this SubAccountAppsToggleRequest.  # noqa: E501
        :type: bool
        """

        self._facebook_ads = facebook_ads

    @property
    def web_push(self):
        """Gets the web_push of this SubAccountAppsToggleRequest.  # noqa: E501

        Set this field to enable or disable Web Push on the sub-account  # noqa: E501

        :return: The web_push of this SubAccountAppsToggleRequest.  # noqa: E501
        :rtype: bool
        """
        return self._web_push

    @web_push.setter
    def web_push(self, web_push):
        """Sets the web_push of this SubAccountAppsToggleRequest.

        Set this field to enable or disable Web Push on the sub-account  # noqa: E501

        :param web_push: The web_push of this SubAccountAppsToggleRequest.  # noqa: E501
        :type: bool
        """

        self._web_push = web_push

    @property
    def meetings(self):
        """Gets the meetings of this SubAccountAppsToggleRequest.  # noqa: E501

        Set this field to enable or disable Meetings on the sub-account  # noqa: E501

        :return: The meetings of this SubAccountAppsToggleRequest.  # noqa: E501
        :rtype: bool
        """
        return self._meetings

    @meetings.setter
    def meetings(self, meetings):
        """Sets the meetings of this SubAccountAppsToggleRequest.

        Set this field to enable or disable Meetings on the sub-account  # noqa: E501

        :param meetings: The meetings of this SubAccountAppsToggleRequest.  # noqa: E501
        :type: bool
        """

        self._meetings = meetings

    @property
    def conversations(self):
        """Gets the conversations of this SubAccountAppsToggleRequest.  # noqa: E501

        Set this field to enable or disable Conversations on the sub-account  # noqa: E501

        :return: The conversations of this SubAccountAppsToggleRequest.  # noqa: E501
        :rtype: bool
        """
        return self._conversations

    @conversations.setter
    def conversations(self, conversations):
        """Sets the conversations of this SubAccountAppsToggleRequest.

        Set this field to enable or disable Conversations on the sub-account  # noqa: E501

        :param conversations: The conversations of this SubAccountAppsToggleRequest.  # noqa: E501
        :type: bool
        """

        self._conversations = conversations

    @property
    def crm(self):
        """Gets the crm of this SubAccountAppsToggleRequest.  # noqa: E501

        Set this field to enable or disable Sales CRM on the sub-account  # noqa: E501

        :return: The crm of this SubAccountAppsToggleRequest.  # noqa: E501
        :rtype: bool
        """
        return self._crm

    @crm.setter
    def crm(self, crm):
        """Sets the crm of this SubAccountAppsToggleRequest.

        Set this field to enable or disable Sales CRM on the sub-account  # noqa: E501

        :param crm: The crm of this SubAccountAppsToggleRequest.  # noqa: E501
        :type: bool
        """

        self._crm = crm

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SubAccountAppsToggleRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SubAccountAppsToggleRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
