# coding: utf-8

"""
    Brevo API

    Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity |   # noqa: E501

    OpenAPI spec version: 3.0.0
    Contact: contact@brevo.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class MasterDetailsResponsePlanInfoFeatures(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'unit_value': 'str',
        'quantity': 'int',
        'quantity_with_overages': 'int',
        'used': 'int',
        'used_overages': 'int',
        'remaining': 'int'
    }

    attribute_map = {
        'name': 'name',
        'unit_value': 'unitValue',
        'quantity': 'quantity',
        'quantity_with_overages': 'quantityWithOverages',
        'used': 'used',
        'used_overages': 'usedOverages',
        'remaining': 'remaining'
    }

    def __init__(self, name=None, unit_value=None, quantity=None, quantity_with_overages=None, used=None, used_overages=None, remaining=None):  # noqa: E501
        """MasterDetailsResponsePlanInfoFeatures - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._unit_value = None
        self._quantity = None
        self._quantity_with_overages = None
        self._used = None
        self._used_overages = None
        self._remaining = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if unit_value is not None:
            self.unit_value = unit_value
        if quantity is not None:
            self.quantity = quantity
        if quantity_with_overages is not None:
            self.quantity_with_overages = quantity_with_overages
        if used is not None:
            self.used = used
        if used_overages is not None:
            self.used_overages = used_overages
        if remaining is not None:
            self.remaining = remaining

    @property
    def name(self):
        """Gets the name of this MasterDetailsResponsePlanInfoFeatures.  # noqa: E501

        Name of the feature  # noqa: E501

        :return: The name of this MasterDetailsResponsePlanInfoFeatures.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MasterDetailsResponsePlanInfoFeatures.

        Name of the feature  # noqa: E501

        :param name: The name of this MasterDetailsResponsePlanInfoFeatures.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def unit_value(self):
        """Gets the unit_value of this MasterDetailsResponsePlanInfoFeatures.  # noqa: E501

        Unit value of the feature  # noqa: E501

        :return: The unit_value of this MasterDetailsResponsePlanInfoFeatures.  # noqa: E501
        :rtype: str
        """
        return self._unit_value

    @unit_value.setter
    def unit_value(self, unit_value):
        """Sets the unit_value of this MasterDetailsResponsePlanInfoFeatures.

        Unit value of the feature  # noqa: E501

        :param unit_value: The unit_value of this MasterDetailsResponsePlanInfoFeatures.  # noqa: E501
        :type: str
        """

        self._unit_value = unit_value

    @property
    def quantity(self):
        """Gets the quantity of this MasterDetailsResponsePlanInfoFeatures.  # noqa: E501

        Quantity provided in the plan  # noqa: E501

        :return: The quantity of this MasterDetailsResponsePlanInfoFeatures.  # noqa: E501
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this MasterDetailsResponsePlanInfoFeatures.

        Quantity provided in the plan  # noqa: E501

        :param quantity: The quantity of this MasterDetailsResponsePlanInfoFeatures.  # noqa: E501
        :type: int
        """

        self._quantity = quantity

    @property
    def quantity_with_overages(self):
        """Gets the quantity_with_overages of this MasterDetailsResponsePlanInfoFeatures.  # noqa: E501

        Quantity with overages provided in the plan (only applicable on ENTv2)  # noqa: E501

        :return: The quantity_with_overages of this MasterDetailsResponsePlanInfoFeatures.  # noqa: E501
        :rtype: int
        """
        return self._quantity_with_overages

    @quantity_with_overages.setter
    def quantity_with_overages(self, quantity_with_overages):
        """Sets the quantity_with_overages of this MasterDetailsResponsePlanInfoFeatures.

        Quantity with overages provided in the plan (only applicable on ENTv2)  # noqa: E501

        :param quantity_with_overages: The quantity_with_overages of this MasterDetailsResponsePlanInfoFeatures.  # noqa: E501
        :type: int
        """

        self._quantity_with_overages = quantity_with_overages

    @property
    def used(self):
        """Gets the used of this MasterDetailsResponsePlanInfoFeatures.  # noqa: E501

        Quantity consumed by master  # noqa: E501

        :return: The used of this MasterDetailsResponsePlanInfoFeatures.  # noqa: E501
        :rtype: int
        """
        return self._used

    @used.setter
    def used(self, used):
        """Sets the used of this MasterDetailsResponsePlanInfoFeatures.

        Quantity consumed by master  # noqa: E501

        :param used: The used of this MasterDetailsResponsePlanInfoFeatures.  # noqa: E501
        :type: int
        """

        self._used = used

    @property
    def used_overages(self):
        """Gets the used_overages of this MasterDetailsResponsePlanInfoFeatures.  # noqa: E501

        Quantity consumed by sub-organizations over the admin plan limit (only applicable on ENTv2)  # noqa: E501

        :return: The used_overages of this MasterDetailsResponsePlanInfoFeatures.  # noqa: E501
        :rtype: int
        """
        return self._used_overages

    @used_overages.setter
    def used_overages(self, used_overages):
        """Sets the used_overages of this MasterDetailsResponsePlanInfoFeatures.

        Quantity consumed by sub-organizations over the admin plan limit (only applicable on ENTv2)  # noqa: E501

        :param used_overages: The used_overages of this MasterDetailsResponsePlanInfoFeatures.  # noqa: E501
        :type: int
        """

        self._used_overages = used_overages

    @property
    def remaining(self):
        """Gets the remaining of this MasterDetailsResponsePlanInfoFeatures.  # noqa: E501

        Quantity remaining in the plan  # noqa: E501

        :return: The remaining of this MasterDetailsResponsePlanInfoFeatures.  # noqa: E501
        :rtype: int
        """
        return self._remaining

    @remaining.setter
    def remaining(self, remaining):
        """Sets the remaining of this MasterDetailsResponsePlanInfoFeatures.

        Quantity remaining in the plan  # noqa: E501

        :param remaining: The remaining of this MasterDetailsResponsePlanInfoFeatures.  # noqa: E501
        :type: int
        """

        self._remaining = remaining

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MasterDetailsResponsePlanInfoFeatures, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MasterDetailsResponsePlanInfoFeatures):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
