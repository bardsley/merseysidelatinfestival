# coding: utf-8

"""
    Brevo API

    Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity |   # noqa: E501

    OpenAPI spec version: 3.0.0
    Contact: contact@brevo.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class UpdateCouponCollection(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'default_coupon': 'str',
        'expiration_date': 'datetime',
        'remaining_days_alert': 'int',
        'remaining_coupons_alert': 'int'
    }

    attribute_map = {
        'default_coupon': 'defaultCoupon',
        'expiration_date': 'expirationDate',
        'remaining_days_alert': 'remainingDaysAlert',
        'remaining_coupons_alert': 'remainingCouponsAlert'
    }

    def __init__(self, default_coupon=None, expiration_date=None, remaining_days_alert=None, remaining_coupons_alert=None):  # noqa: E501
        """UpdateCouponCollection - a model defined in Swagger"""  # noqa: E501

        self._default_coupon = None
        self._expiration_date = None
        self._remaining_days_alert = None
        self._remaining_coupons_alert = None
        self.discriminator = None

        if default_coupon is not None:
            self.default_coupon = default_coupon
        if expiration_date is not None:
            self.expiration_date = expiration_date
        if remaining_days_alert is not None:
            self.remaining_days_alert = remaining_days_alert
        if remaining_coupons_alert is not None:
            self.remaining_coupons_alert = remaining_coupons_alert

    @property
    def default_coupon(self):
        """Gets the default_coupon of this UpdateCouponCollection.  # noqa: E501

        A default coupon to be used in case there are no coupons left  # noqa: E501

        :return: The default_coupon of this UpdateCouponCollection.  # noqa: E501
        :rtype: str
        """
        return self._default_coupon

    @default_coupon.setter
    def default_coupon(self, default_coupon):
        """Sets the default_coupon of this UpdateCouponCollection.

        A default coupon to be used in case there are no coupons left  # noqa: E501

        :param default_coupon: The default_coupon of this UpdateCouponCollection.  # noqa: E501
        :type: str
        """

        self._default_coupon = default_coupon

    @property
    def expiration_date(self):
        """Gets the expiration_date of this UpdateCouponCollection.  # noqa: E501

        Specify an expiration date for the coupon collection in RFC3339 format. Use null to remove the expiration date.  # noqa: E501

        :return: The expiration_date of this UpdateCouponCollection.  # noqa: E501
        :rtype: datetime
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """Sets the expiration_date of this UpdateCouponCollection.

        Specify an expiration date for the coupon collection in RFC3339 format. Use null to remove the expiration date.  # noqa: E501

        :param expiration_date: The expiration_date of this UpdateCouponCollection.  # noqa: E501
        :type: datetime
        """

        self._expiration_date = expiration_date

    @property
    def remaining_days_alert(self):
        """Gets the remaining_days_alert of this UpdateCouponCollection.  # noqa: E501

        Send a notification alert (email) when the remaining days until the expiration date are equal or fall bellow this number. Use null to disable alerts.  # noqa: E501

        :return: The remaining_days_alert of this UpdateCouponCollection.  # noqa: E501
        :rtype: int
        """
        return self._remaining_days_alert

    @remaining_days_alert.setter
    def remaining_days_alert(self, remaining_days_alert):
        """Sets the remaining_days_alert of this UpdateCouponCollection.

        Send a notification alert (email) when the remaining days until the expiration date are equal or fall bellow this number. Use null to disable alerts.  # noqa: E501

        :param remaining_days_alert: The remaining_days_alert of this UpdateCouponCollection.  # noqa: E501
        :type: int
        """

        self._remaining_days_alert = remaining_days_alert

    @property
    def remaining_coupons_alert(self):
        """Gets the remaining_coupons_alert of this UpdateCouponCollection.  # noqa: E501

        Send a notification alert (email) when the remaining coupons count is equal or fall bellow this number. Use null to disable alerts.  # noqa: E501

        :return: The remaining_coupons_alert of this UpdateCouponCollection.  # noqa: E501
        :rtype: int
        """
        return self._remaining_coupons_alert

    @remaining_coupons_alert.setter
    def remaining_coupons_alert(self, remaining_coupons_alert):
        """Sets the remaining_coupons_alert of this UpdateCouponCollection.

        Send a notification alert (email) when the remaining coupons count is equal or fall bellow this number. Use null to disable alerts.  # noqa: E501

        :param remaining_coupons_alert: The remaining_coupons_alert of this UpdateCouponCollection.  # noqa: E501
        :type: int
        """

        self._remaining_coupons_alert = remaining_coupons_alert

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateCouponCollection, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateCouponCollection):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
