org: mrbsoftware # Needs a name for the organization
app: dance-engine # Need to see what connor thinks of name
service: api # Do we need multiple services? 
frameworkVersion: '4.1'

plugins:
  - serverless-prune-plugin

custom:
  prune:
    automatic: true
    includeLayers: true
    number: 10

package:
  individually: true

stages:
  default:
    observability: true
    params:
      attendeesTableName: "${sls:stage}-mlf-attendees"
      stripeProductsTableName: "${sls:stage}-mlf-stripe-products"

provider:
  name: aws
  runtime: python3.11
  region: eu-west-1
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - Fn::GetAtt: [AttendeesTable, Arn]
            - Fn::GetAtt: [StripeProductsTable, Arn]
            - { "Fn::Join": [ "/", [ 
                { "Fn::GetAtt": ["AttendeesTable", "Arn" ] }, "index", "ticket_number-index" 
              ]]}

layers:
  dynamodb:
    path: _layers/python

resources:
  Resources:
    AttendeesTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        DeletionProtectionEnabled: true
        AttributeDefinitions:
          - AttributeName: email 
            AttributeType: S
          - AttributeName: ticket_number 
            AttributeType: S
        KeySchema:
          - AttributeName: email 
            KeyType: HASH
          - AttributeName: ticket_number 
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${param:attendeesTableName}
        GlobalSecondaryIndexes:
          - IndexName: ticket_number-index
            KeySchema:
              - AttributeName: ticket_number 
                KeyType: HASH
            Projection:
              ProjectionType: 'ALL'
    StripeProductsTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        DeletionProtectionEnabled: true
        AttributeDefinitions:
          - AttributeName: prod_id 
            AttributeType: S
          - AttributeName: price_id  
            AttributeType: S
        KeySchema:
          - AttributeName: prod_id
            KeyType: HASH
          - AttributeName: price_id
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${param:stripeProductsTableName}

functions:
  scanTicket:
    handler: scan_ticket/lambda_function.lambda_handler
    package:
      patterns:
        - '!**/**'
        - "scan_ticket/**"
    environment:
      ATTENDEES_TABLE_NAME: ${param:attendeesTableName}
    layers:
      - !Ref DynamodbLambdaLayer
    events:
      - httpApi:
          path: /scan_ticket
          method: get
      - httpApi:
          path: /scan_ticket
          method: post
  customerPreferences:
    handler: customer_preferences/lambda_function.lambda_handler
    package:
      patterns:
        - '!**/**'
        - "customer_preferences/**"
    layers:
      - !Ref DynamodbLambdaLayer
    events:
      - httpApi:
          path: /customer_preferences
          method: get
      - httpApi:
          path: /customer_preferences
          method: post
  transferOwner:
    handler: transfer_owner/lambda_function.lambda_handler
    package:
      patterns:
        - '!**/**'
        - "transfer_owner/**"
    layers:
      - !Ref DynamodbLambdaLayer
    events:
      - httpApi:
          path: /transfer_owner
          method: post
  cardPayment:
    handler: card_payment/lambda_function.lambda_handler
    package:
      patterns:
        - '!**/**'
        - "card_payment/**"
    layers:
      - !Ref DynamodbLambdaLayer
    events:
      - httpApi:
          path: /card_payment
          method: post
  