org: danceenginesystems # Needs a name for the organization
app: dance-engine # Need to see what connor thinks of name
service: api # Do we need multiple services? 
frameworkVersion: '4.1'

plugins:
  - serverless-prune-plugin

custom:
  prune:
    automatic: true
    includeLayers: true
    number: 10

package:
  individually: true

stages:
  default:
    observability: false
    params:
      attendeesTableName: "${sls:stage}-mlf-attendees"
      stripeProductsTableName: "${sls:stage}-mlf-stripe-products"
      isProd: false
      deletionPolicy: Delete 
      skipTables: true
      githubBranchDestination: "develop"
  prod:
    params:
      isProd: true
      deletionPolicy: Retain  
    

provider:
  name: aws
  runtime: nodejs18.x # Needed to enable serverless to run on github actions
  memorySize: 128 # I think this might be overkill
  region: eu-west-1
  stage: ${opt:stage, env:stage, 'preview'}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:DescribeStream
            - dynamodb:GetRecords
            - dynamodb:GetShardIterator
            - dynamodb:ListStreams
          Resource:
            - Fn::GetAtt: [AttendeesTable, Arn]
            - Fn::GetAtt: [StripeProductsTable, Arn]
            - { "Fn::Join": [ "/", [ 
                { "Fn::GetAtt": ["AttendeesTable", "Arn" ] }, "index", "ticket_number-index" 
              ]]}
        - Effect: Allow
          Action:
            - lambda:InvokeFunction
          Resource:
            - '*'

layers:
  dynamodb:
    path: _layers/dynamodb
  stripe:
    path: _layers/stripe
  sendmail:
    path: _layers/sendmail
  github:
    path: _layers/github

resources:
  Resources:
    AttendeesTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: ${param:deletionPolicy}
      Properties:
        DeletionProtectionEnabled: ${param:isProd}
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: ${param:isProd}
        AttributeDefinitions:
          - AttributeName: email 
            AttributeType: S
          - AttributeName: ticket_number 
            AttributeType: S
        KeySchema:
          - AttributeName: email 
            KeyType: HASH
          - AttributeName: ticket_number 
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${param:attendeesTableName}
        GlobalSecondaryIndexes:
          - IndexName: ticket_number-index
            KeySchema:
              - AttributeName: ticket_number 
                KeyType: HASH
            Projection:
              ProjectionType: 'ALL'
    StripeProductsTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: ${param:deletionPolicy}
      Properties:
        DeletionProtectionEnabled: ${param:isProd}
        AttributeDefinitions:
          - AttributeName: prod_id 
            AttributeType: S
          - AttributeName: price_id  
            AttributeType: S
        KeySchema:
          - AttributeName: prod_id
            KeyType: HASH
          - AttributeName: price_id
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${param:stripeProductsTableName}
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
    # APIMapping:
    #   Type: AWS::ApiGatewayV2::ApiMapping
    #   DependsOn: HttpApi
    #   Properties:
    #     Stage: $default
    #     DomainName: "${sls:stage}.api.engine.dance"
    #     ApiId: !Ref HttpApi

functions:

  CardPayment:
    runtime: python3.11
    handler: card_payment/lambda_function.lambda_handler
    name: "${sls:stage}-card_payment"
    package:
      patterns:
        - '!**/**'
        - "card_payment/**"
        - "shared/**"
    environment:
      STAGE_NAME: ${sls:stage}
      PRODUCTS_TABLE_NAME: ${param:stripeProductsTableName}
      CREATE_TICKET_LAMBDA: "${sls:stage}-create_ticket"
    layers:
      - !Ref DynamodbLambdaLayer
    events:
      - httpApi:
          path: /card_payment
          method: post

  CheckoutComplete:
    runtime: python3.11
    handler: checkout_complete/lambda_function.lambda_handler
    name: "${sls:stage}-checkout_complete"
    package:
      patterns:
        - '!**/**'
        - "checkout_complete/**"
        - "shared/**"
    environment:
      STAGE_NAME: ${sls:stage}
      ATTENDEES_TABLE_NAME: ${param:attendeesTableName}
      STRIPE_SECRET_KEY: ${param:stripeSecretKey}
      CREATE_TICKET_LAMBDA: "${sls:stage}-create_ticket" #! Can't find a way to set this other than as a params that gets used byt function and the function itself
    layers:
      - !Ref StripeLambdaLayer
      - !Ref DynamodbLambdaLayer
      - !Ref SendmailLambdaLayer
    events:
      - httpApi:
          path: /checkout_complete
          method: post 

  CreateTicket:
    runtime: python3.11
    handler: create_ticket/lambda_function.lambda_handler
    name: "${sls:stage}-create_ticket"
    package:
      patterns:
        - '!**/**'
        - "create_ticket/**"
        - "shared/**"
    environment:
      STAGE_NAME: ${sls:stage}
      ATTENDEES_TABLE_NAME: ${param:attendeesTableName}
      STRIPE_SECRET_KEY: ${param:stripeSecretKey}
      SEND_EMAIL_LAMBDA: "${sls:stage}-send_email"
    layers:
      - !Ref DynamodbLambdaLayer

  CustomerPreferences:
    runtime: python3.11
    handler: customer_preferences/lambda_function.lambda_handler
    name: "${sls:stage}-customer-preferences"
    package:
      patterns:
        - '!**/**'
        - "customer_preferences/**"
        - "shared/**"
    environment:
      STAGE_NAME: ${sls:stage}
      ATTENDEES_TABLE_NAME: ${param:attendeesTableName}
    layers:
      - !Ref DynamodbLambdaLayer
      - !Ref GithubLambdaLayer
    events:
      - httpApi:
          path: /customer_preferences
          method: get
      - httpApi:
          path: /customer_preferences
          method: post

  GeneratePricingUpdate:
    runtime: python3.11
    handler: gen_price_update/lambda_function.lambda_handler
    name: "${sls:stage}-gen_price_update"
    package:
      patterns:
        - '!**/**'
        - "gen_price_update/**"
        - "shared/**"
    environment:
      STAGE_NAME: ${sls:stage}
      PRODUCTS_TABLE_NAME: ${param:stripeProductsTableName}
      STRIPE_SECRET_KEY: ${param:stripeSecretKey}
      GITHUB_TOKEN: ${param:githubToken}
      GITHUB_BRANCH_NAME: "pricing-${sls:stage}"
      GITHUB_BRANCH_DESTINATION: ${param:githubBranchDestination}
    layers:
      - !Ref StripeLambdaLayer
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt: [StripeProductsTable, StreamArn]
          batchSize: 100
          batchWindow: 300
          startingPosition: LATEST
          maximumRetryAttempts: 1
          enabled: true

  GetAttendees:
    runtime: python3.11
    handler: get_attendees/lambda_function.lambda_handler
    name: "${sls:stage}-get_attendees"
    package:
      patterns:
        - '!**/**'
        - "get_attendees/**"
        - "shared/**"
    environment:
      STAGE_NAME: ${sls:stage}
      ATTENDEES_TABLE_NAME: ${param:attendeesTableName}
    events:
      - httpApi:
          path: /get_attendees
          method: get

  ScanTicket:
    runtime: python3.11
    handler: scan_ticket/lambda_function.lambda_handler
    name: "${sls:stage}-scan_ticket"
    package:
      patterns:
        - '!**/**'
        - "scan_ticket/**"
        - "shared/**"
    environment:
      STAGE_NAME: ${sls:stage}
      ATTENDEES_TABLE_NAME: ${param:attendeesTableName}
    layers:
      - !Ref DynamodbLambdaLayer
      - !Ref GithubLambdaLayer
    events:
      - httpApi:
          path: /scan_ticket
          method: get
      - httpApi:
          path: /scan_ticket
          method: post

  SendEmail:
    runtime: python3.11
    handler: send_email/lambda_function.lambda_handler
    name: "${sls:stage}-send_email"
    package:
      patterns:
        - '!**/**'
        - "send_email/**"
        - "shared/**"
    environment:
      STAGE_NAME: ${sls:stage}
      SENDGRID_API_KEY: ${param:sendgridApiKey}
      SEND_EMAIL_LAMBDA: "${sls:stage}-send_email"
    layers:
      - !Ref GithubLambdaLayer

  SendTicket:
    runtime: python3.11
    handler: send_ticket/lambda_function.lambda_handler
    name: "${sls:stage}-send_ticket"
    package:
      patterns:
        - '!**/**'
        - "send_ticket/**"
        - "shared/**"
    environment:
      STAGE_NAME: ${sls:stage}
      ATTENDEES_TABLE_NAME: ${param:attendeesTableName}
      SEND_EMAIL_LAMBDA: "${sls:stage}-send_email"
    layers:
      - !Ref DynamodbLambdaLayer
      - !Ref SendmailLambdaLayer
      - !Ref GithubLambdaLayer
    events:
      - httpApi:
          path: /send_ticket
          method: get 

  StripePriceUpdate:
    runtime: python3.11
    handler: stripe_price_update/lambda_function.lambda_handler
    name: "${sls:stage}-stripe_price_update"
    package:
      patterns:
        - '!**/**'
        - "stripe_price_update/**"
        - "shared/**"
    environment:
      STAGE_NAME: ${sls:stage}
      ATTENDEES_TABLE_NAME: ${param:attendeesTableName}
      PRODUCTS_TABLE_NAME: ${param:stripeProductsTableName}
      STRIPE_SECRET_KEY: ${param:stripeSecretKey}
    layers:
      - !Ref DynamodbLambdaLayer
    events:
      - httpApi:
          path: /stripe_price_update
          method: post 

  TransferOwner:
    runtime: python3.11
    handler: transfer_owner/lambda_function.lambda_handler
    name: "${sls:stage}-transfer_owner"
    package:
      patterns:
        - '!**/**'
        - "transfer_owner/**"
        -  "shared/**"
    environment:
      STAGE_NAME: ${sls:stage}
      ATTENDEES_TABLE_NAME: ${param:attendeesTableName}
      CREATE_TICKET_LAMBDA: "${sls:stage}-create_ticket"
      SEND_EMAIL_LAMBDA: "${sls:stage}-send_email"
    layers:
      - !Ref DynamodbLambdaLayer
    events:
      - httpApi:
          path: /transfer_owner
          method: post







